Hi

------------------------------------------

Terraform -> 20 -> 15 to completed -> 24, 25, 26, 27, 28, 29, 30, 31 -> 8 days -> 10 have to complete
Dovker -> 6
K8S -> 14
Git -> 2
Jenkins -> 8
Monitoring -> 6
Python -> 4

15 + 6 + 14 + 2 + 8 + 6 + 4 -> 55 -> We can complete all these sessions within 2 months or less
----------------------

Consistent infra across all env
1. tfvars
2. terraform workspaces
3. Separate repos

Resourse definition
-------------
left side -> arguements
right side -> values

Create one repo -> Terraform-multi-env

tfvars -> Override the default variables

dev.tfvars -> for dev env
prod.tfvars -> for prod env

For backend -> s3 and dynamo db

2 choices
1. Keep the same bucket but diff key
2. keep diff buckets for diff env and diff key -> It is recommended

expense infra
-------------------
3-ec2, 1-sg, 3-r53 records

Clone the multi-env repo in git bash

Follow the video for code

terraform initialization using tfvars

terraform init -backend-config=dev/backend.tf
dev/backend.tf -> file path

Instance names, r53 records for dev and prod should be different

mysql-dev
backend-dev
frontend-dev

mysql-dev.haridev.online
backend-dev.haridev.online
frontend-dev.haridev.online

Extension to be used -> .tfvars

terraform plan -var-file=dev/dev.tfvars
dev/dev.tfvars -> terraform will search variables in this path

terraform apply -var-file="dev/dev.tfvars" -auto-approve

To point to prod, we should reinitiate the terraform

terraform init -reconfigure -backend-config=prod/backend.tf

terraform plan -var-file="prod/prod.tfvars"
terraform apply -var-file="prod/prod.tfvars" -auto-approve

startswith function usage

Check whether all ec2 instances and r53 records created or not for dev and prod environments

Creating and maintaining different folders for dev and prod and separate backend.tfvars file. This is what we are doing here to create multi environments by using tfvars method

Workspaces
-------------------------
ec2 instance creation
If prod -> t3.medium
If dev -> t2.micro

No need to create diff buckets for workspaces. That will be taken care by terraform itseld

In workspaces folder

terraform init

Create workspaces first

terraform workspace new dev
terraform workspace new prod

Check in amazon s3 buckets -> you can see already created folders in it

terraform workspace show
--> it will give the workspace where you are working

terraform workspace list -> gives all the workspaces

terraform workspace select dev -> switch tp dev env

we get terraform.workspace variable from workspaces and we can do many things using this special variable

terraform.workspace == dev
terraform.workspace == prod

terraform.workspace will keep out current environment value in it. 

Advantages
----------------
code reuse -> we have seen that the same code is using in dev and prod as well by changing the right side values

Disadvantages
----------------
errors may occur easily
not easy to implement
changes made can effect in all environments

Serarate code for separate env
----------------------------------
expense-infra-dev
expense-infra-prod

Disadvantages
-----------------
Duplicated code


Module development
----------------------
Functions -> we can call a function infinite times. It will give inputs and give us outputs

Write the code only once and call them many times -> Modules

Modules -> resource definition and arguemnts are same, only values are different

create one repo -> terraform-aws-ec2

ec2-module-demo -> here we use code in above folder by using module keyword
